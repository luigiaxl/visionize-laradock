version: '3'

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

volumes:
  mysql:
    driver: ${VOLUMES_DRIVER}
  percona:
    driver: ${VOLUMES_DRIVER}
  mssql:
    driver: ${VOLUMES_DRIVER}
  postgres:
    driver: ${VOLUMES_DRIVER}
  memcached:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}
  neo4j:
    driver: ${VOLUMES_DRIVER}
  mariadb:
    driver: ${VOLUMES_DRIVER}
  mongo:
    driver: ${VOLUMES_DRIVER}
  minio:
    driver: ${VOLUMES_DRIVER}
  rethinkdb:
    driver: ${VOLUMES_DRIVER}
  phpmyadmin:
    driver: ${VOLUMES_DRIVER}
  adminer:
    driver: ${VOLUMES_DRIVER}
  aerospike:
    driver: ${VOLUMES_DRIVER}
  caddy:
    driver: ${VOLUMES_DRIVER}
  elasticsearch:
    driver: ${VOLUMES_DRIVER}
  mosquitto:
    driver: ${VOLUMES_DRIVER}
  confluence:
    driver: ${VOLUMES_DRIVER}
  sonarqube:
    driver: ${VOLUMES_DRIVER}
  cassandra:
    driver: ${VOLUMES_DRIVER}
  graylog:
    driver: ${VOLUMES_DRIVER}
  docker-in-docker:
    driver: ${VOLUMES_DRIVER}

services:

  ### Workspace Utilities ##################################
  workspace:
    build:
      context: ./workspace
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - SHELL_OH_MY_ZSH=${SHELL_OH_MY_ZSH}
        - UBUNTU_SOURCE=${UBUNTU_SOURCE}
        - LARADOCK_PHP_VERSION=${PHP_VERSION}
        - LARADOCK_PHALCON_VERSION=${PHALCON_VERSION}
        - INSTALL_SUBVERSION=${WORKSPACE_INSTALL_SUBVERSION}
        - INSTALL_BZ2=${WORKSPACE_INSTALL_BZ2}
        - INSTALL_GMP=${WORKSPACE_INSTALL_GMP}
        - INSTALL_XDEBUG=${WORKSPACE_INSTALL_XDEBUG}
        - INSTALL_PCOV=${WORKSPACE_INSTALL_PCOV}
        - INSTALL_PHPDBG=${WORKSPACE_INSTALL_PHPDBG}
        - INSTALL_BLACKFIRE=${INSTALL_BLACKFIRE}
        - INSTALL_SSH2=${WORKSPACE_INSTALL_SSH2}
        - INSTALL_SOAP=${WORKSPACE_INSTALL_SOAP}
        - INSTALL_XSL=${WORKSPACE_INSTALL_XSL}
        - INSTALL_LDAP=${WORKSPACE_INSTALL_LDAP}
        - INSTALL_SMB=${WORKSPACE_INSTALL_SMB}
        - INSTALL_IMAP=${WORKSPACE_INSTALL_IMAP}
        - INSTALL_MONGO=${WORKSPACE_INSTALL_MONGO}
        - INSTALL_AMQP=${WORKSPACE_INSTALL_AMQP}
        - INSTALL_CASSANDRA=${WORKSPACE_INSTALL_CASSANDRA}
        - INSTALL_GEARMAN=${WORKSPACE_INSTALL_GEARMAN}
        - INSTALL_PHPREDIS=${WORKSPACE_INSTALL_PHPREDIS}
        - INSTALL_MSSQL=${WORKSPACE_INSTALL_MSSQL}
        - NVM_NODEJS_ORG_MIRROR=${WORKSPACE_NVM_NODEJS_ORG_MIRROR}
        - INSTALL_NODE=${WORKSPACE_INSTALL_NODE}
        - NPM_REGISTRY=${WORKSPACE_NPM_REGISTRY}
        - INSTALL_YARN=${WORKSPACE_INSTALL_YARN}
        - INSTALL_NPM_GULP=${WORKSPACE_INSTALL_NPM_GULP}
        - INSTALL_NPM_BOWER=${WORKSPACE_INSTALL_NPM_BOWER}
        - INSTALL_NPM_VUE_CLI=${WORKSPACE_INSTALL_NPM_VUE_CLI}
        - INSTALL_NPM_ANGULAR_CLI=${WORKSPACE_INSTALL_NPM_ANGULAR_CLI}
        - INSTALL_DRUSH=${WORKSPACE_INSTALL_DRUSH}
        - INSTALL_WP_CLI=${WORKSPACE_INSTALL_WP_CLI}
        - INSTALL_DRUPAL_CONSOLE=${WORKSPACE_INSTALL_DRUPAL_CONSOLE}
        - INSTALL_AEROSPIKE=${WORKSPACE_INSTALL_AEROSPIKE}
        - INSTALL_OCI8=${WORKSPACE_INSTALL_OCI8}
        - INSTALL_V8JS=${WORKSPACE_INSTALL_V8JS}
        - COMPOSER_GLOBAL_INSTALL=${WORKSPACE_COMPOSER_GLOBAL_INSTALL}
        - COMPOSER_AUTH=${WORKSPACE_COMPOSER_AUTH}
        - COMPOSER_REPO_PACKAGIST=${WORKSPACE_COMPOSER_REPO_PACKAGIST}
        - INSTALL_WORKSPACE_SSH=${WORKSPACE_INSTALL_WORKSPACE_SSH}
        - INSTALL_LARAVEL_ENVOY=${WORKSPACE_INSTALL_LARAVEL_ENVOY}
        - INSTALL_LARAVEL_INSTALLER=${WORKSPACE_INSTALL_LARAVEL_INSTALLER}
        - INSTALL_DEPLOYER=${WORKSPACE_INSTALL_DEPLOYER}
        - INSTALL_PRESTISSIMO=${WORKSPACE_INSTALL_PRESTISSIMO}
        - INSTALL_LINUXBREW=${WORKSPACE_INSTALL_LINUXBREW}
        - INSTALL_MC=${WORKSPACE_INSTALL_MC}
        - INSTALL_SYMFONY=${WORKSPACE_INSTALL_SYMFONY}
        - INSTALL_PYTHON=${WORKSPACE_INSTALL_PYTHON}
        - INSTALL_IMAGE_OPTIMIZERS=${WORKSPACE_INSTALL_IMAGE_OPTIMIZERS}
        - INSTALL_IMAGEMAGICK=${WORKSPACE_INSTALL_IMAGEMAGICK}
        - INSTALL_TERRAFORM=${WORKSPACE_INSTALL_TERRAFORM}
        - INSTALL_DUSK_DEPS=${WORKSPACE_INSTALL_DUSK_DEPS}
        - INSTALL_PG_CLIENT=${WORKSPACE_INSTALL_PG_CLIENT}
        - INSTALL_PHALCON=${WORKSPACE_INSTALL_PHALCON}
        - INSTALL_SWOOLE=${WORKSPACE_INSTALL_SWOOLE}
        - INSTALL_TAINT=${WORKSPACE_INSTALL_TAINT}
        - INSTALL_LIBPNG=${WORKSPACE_INSTALL_LIBPNG}
        - INSTALL_IONCUBE=${WORKSPACE_INSTALL_IONCUBE}
        - INSTALL_MYSQL_CLIENT=${WORKSPACE_INSTALL_MYSQL_CLIENT}
        - INSTALL_PING=${WORKSPACE_INSTALL_PING}
        - INSTALL_SSHPASS=${WORKSPACE_INSTALL_SSHPASS}
        - INSTALL_INOTIFY=${WORKSPACE_INSTALL_INOTIFY}
        - INSTALL_FSWATCH=${WORKSPACE_INSTALL_FSWATCH}
        - INSTALL_AST=${WORKSPACE_INSTALL_AST}
        - INSTALL_YAML=${WORKSPACE_INSTALL_YAML}
        - INSTALL_MAILPARSE=${WORKSPACE_INSTALL_MAILPARSE}
        - INSTALL_GIT_PROMPT=${WORKSPACE_INSTALL_GIT_PROMPT}
        - PUID=${WORKSPACE_PUID}
        - PGID=${WORKSPACE_PGID}
        - CHROME_DRIVER_VERSION=${WORKSPACE_CHROME_DRIVER_VERSION}
        - NODE_VERSION=${WORKSPACE_NODE_VERSION}
        - YARN_VERSION=${WORKSPACE_YARN_VERSION}
        - DRUSH_VERSION=${WORKSPACE_DRUSH_VERSION}
        - AST_VERSION=${WORKSPACE_AST_VERSION}
        - TZ=${WORKSPACE_TIMEZONE}
        - BLACKFIRE_CLIENT_ID=${BLACKFIRE_CLIENT_ID}
        - BLACKFIRE_CLIENT_TOKEN=${BLACKFIRE_CLIENT_TOKEN}
        - INSTALL_POWERLINE=${WORKSPACE_INSTALL_POWERLINE}
        - INSTALL_SUPERVISOR=${WORKSPACE_INSTALL_SUPERVISOR}
        - INSTALL_FFMPEG=${WORKSPACE_INSTALL_FFMPEG}
        - INSTALL_WKHTMLTOPDF=${WORKSPACE_INSTALL_WKHTMLTOPDF}
        - INSTALL_GNU_PARALLEL=${WORKSPACE_INSTALL_GNU_PARALLEL}
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - docker-in-docker:/certs/client
      - ./php-worker/supervisord.d:/etc/supervisord.d
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    ports:
      - "${WORKSPACE_SSH_PORT}:22"
      - "${WORKSPACE_BROWSERSYNC_HOST_PORT}:3000"
      - "${WORKSPACE_BROWSERSYNC_UI_HOST_PORT}:3001"
      - "${WORKSPACE_VUE_CLI_SERVE_HOST_PORT}:8080"
      - "${WORKSPACE_VUE_CLI_UI_HOST_PORT}:8000"
    tty: true
    environment:
      - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
      - DOCKER_HOST=tcp://docker-in-docker:2376
      - DOCKER_TLS_VERIFY=1
      - DOCKER_TLS_CERTDIR=/certs
      - DOCKER_CERT_PATH=/certs/client
    networks:
      - frontend
      - backend
    links:
      - docker-in-docker

  ### PHP-FPM ##############################################
  php-fpm:
    build:
      context: ./php-fpm
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - LARADOCK_PHP_VERSION=${PHP_VERSION}
        - LARADOCK_PHALCON_VERSION=${PHALCON_VERSION}
        - INSTALL_BZ2=${PHP_FPM_INSTALL_BZ2}
        - INSTALL_GMP=${PHP_FPM_INSTALL_GMP}
        - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
        - INSTALL_PCOV=${PHP_FPM_INSTALL_PCOV}
        - INSTALL_PHPDBG=${PHP_FPM_INSTALL_PHPDBG}
        - INSTALL_BLACKFIRE=${INSTALL_BLACKFIRE}
        - INSTALL_SSH2=${PHP_FPM_INSTALL_SSH2}
        - INSTALL_SOAP=${PHP_FPM_INSTALL_SOAP}
        - INSTALL_XSL=${PHP_FPM_INSTALL_XSL}
        - INSTALL_SMB=${PHP_FPM_INSTALL_SMB}
        - INSTALL_IMAP=${PHP_FPM_INSTALL_IMAP}
        - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
        - INSTALL_AMQP=${PHP_FPM_INSTALL_AMQP}
        - INSTALL_CASSANDRA=${PHP_FPM_INSTALL_CASSANDRA}
        - INSTALL_GEARMAN=${PHP_FPM_INSTALL_GEARMAN}
        - INSTALL_MSSQL=${PHP_FPM_INSTALL_MSSQL}
        - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
        - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
        - INSTALL_MEMCACHED=${PHP_FPM_INSTALL_MEMCACHED}
        - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
        - INSTALL_EXIF=${PHP_FPM_INSTALL_EXIF}
        - INSTALL_AEROSPIKE=${PHP_FPM_INSTALL_AEROSPIKE}
        - INSTALL_OCI8=${PHP_FPM_INSTALL_OCI8}
        - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
        - INSTALL_PGSQL=${PHP_FPM_INSTALL_PGSQL}
        - INSTALL_PG_CLIENT=${PHP_FPM_INSTALL_PG_CLIENT}
        - INSTALL_POSTGIS=${PHP_FPM_INSTALL_POSTGIS}
        - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
        - INSTALL_GHOSTSCRIPT=${PHP_FPM_INSTALL_GHOSTSCRIPT}
        - INSTALL_LDAP=${PHP_FPM_INSTALL_LDAP}
        - INSTALL_PHALCON=${PHP_FPM_INSTALL_PHALCON}
        - INSTALL_SWOOLE=${PHP_FPM_INSTALL_SWOOLE}
        - INSTALL_TAINT=${PHP_FPM_INSTALL_TAINT}
        - INSTALL_IMAGE_OPTIMIZERS=${PHP_FPM_INSTALL_IMAGE_OPTIMIZERS}
        - INSTALL_IMAGEMAGICK=${PHP_FPM_INSTALL_IMAGEMAGICK}
        - INSTALL_CALENDAR=${PHP_FPM_INSTALL_CALENDAR}
        - INSTALL_FAKETIME=${PHP_FPM_INSTALL_FAKETIME}
        - INSTALL_IONCUBE=${PHP_FPM_INSTALL_IONCUBE}
        - INSTALL_APCU=${PHP_FPM_INSTALL_APCU}
        - INSTALL_CACHETOOL=${PHP_FPM_INSTALL_CACHETOOL}
        - INSTALL_YAML=${PHP_FPM_INSTALL_YAML}
        - INSTALL_RDKAFKA=${PHP_FPM_INSTALL_RDKAFKA}
        - INSTALL_GETTEXT=${PHP_FPM_INSTALL_GETTEXT}
        - INSTALL_ADDITIONAL_LOCALES=${PHP_FPM_INSTALL_ADDITIONAL_LOCALES}
        - INSTALL_MYSQL_CLIENT=${PHP_FPM_INSTALL_MYSQL_CLIENT}
        - INSTALL_PING=${PHP_FPM_INSTALL_PING}
        - INSTALL_SSHPASS=${PHP_FPM_INSTALL_SSHPASS}
        - INSTALL_MAILPARSE=${PHP_FPM_INSTALL_MAILPARSE}
        - INSTALL_PCNTL=${PHP_FPM_INSTALL_PCNTL}
        - ADDITIONAL_LOCALES=${PHP_FPM_ADDITIONAL_LOCALES}
        - INSTALL_FFMPEG=${PHP_FPM_FFMPEG}
        - INSTALL_WKHTMLTOPDF=${PHP_FPM_INSTALL_WKHTMLTOPDF}
        - INSTALL_XHPROF=${PHP_FPM_INSTALL_XHPROF}
        - PUID=${PHP_FPM_PUID}
        - PGID=${PHP_FPM_PGID}
        - LOCALE=${PHP_FPM_DEFAULT_LOCALE}
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - docker-in-docker:/certs/client
    expose:
      - "9000"
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    environment:
      - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
      - DOCKER_HOST=tcp://docker-in-docker:2376
      - DOCKER_TLS_VERIFY=1
      - DOCKER_TLS_CERTDIR=/certs
      - DOCKER_CERT_PATH=/certs/client
      - FAKETIME=${PHP_FPM_FAKETIME}
    depends_on:
      - workspace
    networks:
      - backend
    links:
      - docker-in-docker

  ### PHP Worker ############################################
  php-worker:
    build:
      context: ./php-worker
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - LARADOCK_PHP_VERSION=${PHP_VERSION}
        - PHALCON_VERSION=${PHALCON_VERSION}
        - INSTALL_BZ2=${PHP_WORKER_INSTALL_BZ2}
        - INSTALL_GD=${PHP_WORKER_INSTALL_GD}
        - INSTALL_GMP=${PHP_WORKER_INSTALL_GMP}
        - INSTALL_PGSQL=${PHP_WORKER_INSTALL_PGSQL}
        - INSTALL_BCMATH=${PHP_WORKER_INSTALL_BCMATH}
        - INSTALL_PHALCON=${PHP_WORKER_INSTALL_PHALCON}
        - INSTALL_SOAP=${PHP_WORKER_INSTALL_SOAP}
        - INSTALL_ZIP_ARCHIVE=${PHP_WORKER_INSTALL_ZIP_ARCHIVE}
        - INSTALL_MYSQL_CLIENT=${PHP_WORKER_INSTALL_MYSQL_CLIENT}
        - INSTALL_AMQP=${PHP_WORKER_INSTALL_AMQP}
        - INSTALL_CASSANDRA=${PHP_WORKER_INSTALL_CASSANDRA}
        - INSTALL_GEARMAN=${PHP_WORKER_INSTALL_GEARMAN}
        - INSTALL_GHOSTSCRIPT=${PHP_WORKER_INSTALL_GHOSTSCRIPT}
        - INSTALL_SWOOLE=${PHP_WORKER_INSTALL_SWOOLE}
        - INSTALL_TAINT=${PHP_WORKER_INSTALL_TAINT}
        - INSTALL_FFMPEG=${PHP_WORKER_INSTALL_FFMPEG}
        - INSTALL_REDIS=${PHP_WORKER_INSTALL_REDIS}
        - PUID=${PHP_WORKER_PUID}
        - PGID=${PHP_WORKER_PGID}
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - ./php-worker/supervisord.d:/etc/supervisord.d
    depends_on:
      - workspace
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    networks:
      - backend
  ### Laravel Horizon ############################################
  laravel-horizon:
    build:
      context: ./laravel-horizon
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - LARADOCK_PHP_VERSION=${PHP_VERSION}
        - INSTALL_BZ2=${LARAVEL_HORIZON_INSTALL_BZ2}
        - INSTALL_GD=${LARAVEL_HORIZON_INSTALL_GD}
        - INSTALL_GMP=${LARAVEL_HORIZON_INSTALL_GMP}
        - INSTALL_PGSQL=${PHP_FPM_INSTALL_PGSQL}
        - INSTALL_ZIP_ARCHIVE=${LARAVEL_HORIZON_INSTALL_ZIP_ARCHIVE}
        - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
        - INSTALL_MEMCACHED=${PHP_FPM_INSTALL_MEMCACHED}
        - INSTALL_SOCKETS=${LARAVEL_HORIZON_INSTALL_SOCKETS}
        - INSTALL_YAML=${LARAVEL_HORIZON_INSTALL_YAML}
        - INSTALL_CASSANDRA=${PHP_FPM_INSTALL_CASSANDRA}
        - INSTALL_PHPREDIS=${LARAVEL_HORIZON_INSTALL_PHPREDIS}
        - INSTALL_MONGO=${LARAVEL_HORIZON_INSTALL_MONGO}
        - INSTALL_FFMPEG=${LARAVEL_HORIZON_INSTALL_FFMPEG}
        - PUID=${LARAVEL_HORIZON_PUID}
        - PGID=${LARAVEL_HORIZON_PGID}
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      - ./laravel-horizon/supervisord.d:/etc/supervisord.d
    depends_on:
      - workspace
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    networks:
      - backend

  ### NGINX Server #########################################
  nginx:
    build:
      context: ./nginx
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
        - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
      - ${NGINX_SSL_PATH}:/etc/nginx/ssl
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
      - "${VARNISH_BACKEND_PORT}:81"
    depends_on:
      - php-fpm
    networks:
      - frontend
      - backend

  ### MySQL ################################################
  mysql:
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${WORKSPACE_TIMEZONE}
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
      - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - backend

  ### Redis ################################################
  redis:
    build: ./redis
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - backend

  ### Redis Cluster ##########################################
  redis-cluster:
    build: ./redis-cluster
    ports:
      - "${REDIS_CLUSTER_PORT_RANGE}:7000-7005"
    networks:
      - backend

  ### Memcached ############################################
  memcached:
    build: ./memcached
    volumes:
      - ${DATA_PATH_HOST}/memcached:/var/lib/memcached
    ports:
      - "${MEMCACHED_HOST_PORT}:11211"
    depends_on:
      - php-fpm
    networks:
      - backend

  ### Beanstalkd ###########################################
  beanstalkd:
    build: ./beanstalkd
    ports:
      - "${BEANSTALKD_HOST_PORT}:11300"
    privileged: true
    depends_on:
      - php-fpm
    networks:
      - backend

  ### Beanstalkd Console ###################################
  beanstalkd-console:
    build: ./beanstalkd-console
    ports:
      - "${BEANSTALKD_CONSOLE_HOST_PORT}:2080"
    depends_on:
      - beanstalkd
    networks:
      - backend

  ### phpMyAdmin ###########################################
  phpmyadmin:
    build: ./phpmyadmin
    environment:
      - PMA_ARBITRARY=1
      - MYSQL_USER=${PMA_USER}
      - MYSQL_PASSWORD=${PMA_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${PMA_ROOT_PASSWORD}
    ports:
      - "${PMA_PORT}:80"
    depends_on:
      - "${PMA_DB_ENGINE}"
    networks:
      - frontend
      - backend

  ### Certbot #########################################
  certbot:
    build:
      context: ./certbot
    volumes:
      - ./data/certbot/certs/:/var/certs
      - ./certbot/letsencrypt/:/var/www/letsencrypt
    environment:
      - CN="fake.domain.com"
      - EMAIL="fake.email@gmail.com"
    networks:
      - frontend

  ### Mailhog ################################################
  mailhog:
    build: ./mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - frontend
      - backend

  ### MailDev ##############################################
  maildev:
    build: ./maildev
    ports:
      - "${MAILDEV_HTTP_PORT}:80"
      - "${MAILDEV_SMTP_PORT}:25"
    networks:
      - frontend
      - backend

  ### Selenium ###############################################
  selenium:
    build: ./selenium
    ports:
      - "${SELENIUM_PORT}:4444"
    volumes:
      - /dev/shm:/dev/shm
    networks:
      - frontend

  ### Varnish ##########################################
  proxy:
    container_name: proxy
    build: ./varnish
    expose:
      - ${VARNISH_PORT}
    environment:
      - VARNISH_CONFIG=${VARNISH_CONFIG}
      - CACHE_SIZE=${VARNISH_PROXY1_CACHE_SIZE}
      - VARNISHD_PARAMS=${VARNISHD_PARAMS}
      - VARNISH_PORT=${VARNISH_PORT}
      - BACKEND_HOST=${VARNISH_PROXY1_BACKEND_HOST}
      - BACKEND_PORT=${VARNISH_BACKEND_PORT}
      - VARNISH_SERVER=${VARNISH_PROXY1_SERVER}
    ports:
      - "${VARNISH_PORT}:${VARNISH_PORT}"
    links:
      - workspace
    networks:
      - frontend

  proxy2:
    container_name: proxy2
    build: ./varnish
    expose:
      - ${VARNISH_PORT}
    environment:
      - VARNISH_CONFIG=${VARNISH_CONFIG}
      - CACHE_SIZE=${VARNISH_PROXY2_CACHE_SIZE}
      - VARNISHD_PARAMS=${VARNISHD_PARAMS}
      - VARNISH_PORT=${VARNISH_PORT}
      - BACKEND_HOST=${VARNISH_PROXY2_BACKEND_HOST}
      - BACKEND_PORT=${VARNISH_BACKEND_PORT}
      - VARNISH_SERVER=${VARNISH_PROXY2_SERVER}
    ports:
      - "${VARNISH_PORT}:${VARNISH_PORT}"
    links:
      - workspace
    networks:
      - frontend

  ### HAProxy ####################################
  haproxy:
    build: ./haproxy
    ports:
      - "${HAPROXY_HOST_HTTP_PORT}:8085"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    links:
      - proxy
      - proxy2

  ### Jenkins ###################################################
  jenkins:
    build: ./jenkins
    environment:
      JAVA_OPTS: "-Djava.awt.headless=true"
    ports:
      - "${JENKINS_HOST_SLAVE_AGENT_PORT}:50000"
      - "${JENKINS_HOST_HTTP_PORT}:8080"
    privileged: true
    volumes:
      - ${JENKINS_HOME}:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - frontend
      - backend

  ### Laravel Echo Server #######################################
  laravel-echo-server:
    build:
      context: ./laravel-echo-server
    volumes:
      - ./laravel-echo-server/laravel-echo-server.json:/app/laravel-echo-server.json:ro
    ports:
      - "${LARAVEL_ECHO_SERVER_PORT}:6001"
    links:
      - redis
    networks:
      - frontend
      - backend

  ### AWS EB-CLI ################################################
  aws:
    build:
      context: ./aws-eb-cli
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    depends_on:
      - workspace
    tty: true

  ### Docker-in-Docker ################################################
  docker-in-docker:
    image: docker:19.03-dind
    environment:
      DOCKER_TLS_SAN: DNS:docker-in-docker
    privileged: true
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      - docker-in-docker:/certs/client
    expose:
      - 2375
    networks:
      - backend

  ### NetData ################################################
  netdata:
    image: titpetric/netdata:latest
    cap_add:
      - SYS_PTRACE
    volumes:
      - /:/host:ro
    ports:
      - "${NETDATA_PORT}:19999"
    networks:
      - backend

  ### REDISWEBUI ################################################
  redis-webui:
    build:
      context: ./redis-webui
    environment:
      - ADMIN_USER=${REDIS_WEBUI_USERNAME}
      - ADMIN_PASS=${REDIS_WEBUI_PASSWORD}
      - REDIS_1_HOST=${REDIS_WEBUI_CONNECT_HOST}
      - REDIS_1_PORT=${REDIS_WEBUI_CONNECT_PORT}
    networks:
      - backend
    ports:
      - "${REDIS_WEBUI_PORT}:80"
    depends_on:
      - redis

  ### DOCKER-REGISTRY ################################################
  docker-registry:
    build:
      context: ./docker-registry
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DATA_PATH_HOST}/docker-registry:/var/lib/registry
    ports:
      - "${DOCKER_REGISTRY_PORT}:5000"
    networks:
      - backend

  ### DOCKER-WEB-UI ################################################
  docker-web-ui:
    build:
      context: ./docker-web-ui
    environment:
      - TZ=${WORKSPACE_TIMEZONE}
      - ENV_DOCKER_REGISTRY_HOST=${DOCKER_WEBUI_REGISTRY_HOST}
      - ENV_DOCKER_REGISTRY_PORT=${DOCKER_WEBUI_REGISTRY_PORT}
      - ENV_DOCKER_REGISTRY_USE_SSL=${DOCKER_REGISTRY_USE_SSL}
      - ENV_MODE_BROWSE_ONLY=${DOCKER_REGISTRY_BROWSE_ONLY}
    volumes:
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "${DOCKER_WEBUI_PORT}:80"
    networks:
      - frontend
      - backend

  ### MAILU ################################################
  mailu:
    image: mailu/admin:${MAILU_VERSION}
    volumes:
      - "${DATA_PATH_HOST}/mailu/data:/data"
      - "${DATA_PATH_HOST}/mailu/dkim:/dkim"
      - "${DATA_PATH_HOST}/mailu/webmail:/webmail"
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - mailu-front
      - mailu-imap
      - mailu-smtp
      - mailu-antispam
      - mailu-antivirus
      - mailu-webdav
      - mailu-admin
      - mailu-webmail
      - mailu-fetchmail
    command: ["sh", "-c", "echo ${MAILU_INIT_ADMIN_USERNAME}@${MAILU_DOMAIN} ${MAILU_INIT_ADMIN_PASSWORD} ;python manage.py advertise ; python manage.py db upgrade ; python manage.py admin ${MAILU_INIT_ADMIN_USERNAME} ${MAILU_DOMAIN} ${MAILU_INIT_ADMIN_PASSWORD} || true;sed -i -- \"s/= Off/= On/g\" /webmail/_data_/_default_/configs/config.ini || true;if grep -Fq \"registration_link_url\" /webmail/_data_/_default_/configs/config.ini;then echo Already set!;else echo \"\" >> /webmail/_data_/_default_/configs/config.ini; echo \"[login]\" >> /webmail/_data_/_default_/configs/config.ini;echo \"registration_link_url = '${MAILU_WEBSITE}${MAILU_WEB_ADMIN}/ui/user/signup'\" >> /webmail/_data_/_default_/configs/config.ini;fi"]
    networks:
      - backend
  mailu-front:
    image: mailu/nginx:${MAILU_VERSION}
    environment:
      - ADMIN=${MAILU_ADMIN}
      - WEB_ADMIN=${MAILU_WEB_ADMIN}
      - WEB_WEBMAIL=${MAILU_WEB_WEBMAIL}
      - WEBDAV=${MAILU_WEBDAV}
      - HOSTNAMES=${MAILU_HOSTNAMES}
      - TLS_FLAVOR=${MAILU_TLS_FLAVOR}
      - MESSAGE_SIZE_LIMIT=${MAILU_MESSAGE_SIZE_LIMIT}
    ports:
      - "${MAILU_HTTP_PORT}:80"
      - "${MAILU_HTTPS_PORT}:443"
      - "110:110"
      - "143:143"
      - "993:993"
      - "995:995"
      - "25:25"
      - "465:465"
      - "587:587"
    volumes:
      - "${DATA_PATH_HOST}/mailu/certs:/certs"
    networks:
      backend:
        aliases:
          - front
  mailu-imap:
    image: mailu/dovecot:${MAILU_VERSION}
    environment:
      - DOMAIN=${MAILU_DOMAIN}
      - HOSTNAMES=${MAILU_HOSTNAMES}
      - POSTMASTER=${MAILU_POSTMASTER}
      - WEBMAIL=${MAILU_WEBMAIL}
      - RECIPIENT_DELIMITER=${MAILU_RECIPIENT_DELIMITER}
    volumes:
      - "${DATA_PATH_HOST}/mailu/data:/data"
      - "${DATA_PATH_HOST}/mailu/mail:/mail"
      - "${DATA_PATH_HOST}/mailu/overrides:/overrides"
    depends_on:
      - mailu-front
    networks:
      backend:
        aliases:
          - imap
  mailu-smtp:
    image: mailu/postfix:${MAILU_VERSION}
    environment:
      - DOMAIN=${MAILU_DOMAIN}
      - HOSTNAMES=${MAILU_HOSTNAMES}
      - RELAYHOST=${MAILU_RELAYHOST}
      - RELAYNETS=${MAILU_RELAYNETS}
      - RECIPIENT_DELIMITER=${MAILU_RECIPIENT_DELIMITER}
      - MESSAGE_SIZE_LIMIT=${MAILU_MESSAGE_SIZE_LIMIT}
    volumes:
      - "${DATA_PATH_HOST}/mailu/data:/data"
      - "${DATA_PATH_HOST}/mailu/overrides:/overrides"
    depends_on:
      - mailu-front
    networks:
      backend:
        aliases:
          - smtp
  mailu-antispam:
    image: mailu/rspamd:${MAILU_VERSION}
    volumes:
      - "${DATA_PATH_HOST}/mailu/filter:/var/lib/rspamd"
      - "${DATA_PATH_HOST}/mailu/dkim:/dkim"
      - "${DATA_PATH_HOST}/mailu/overrides/rspamd:/etc/rspamd/override.d"
    depends_on:
      - mailu-front
    networks:
      backend:
        aliases:
          - antispam
  mailu-antivirus:
    image: mailu/clamav:${MAILU_VERSION}
    volumes:
      - "${DATA_PATH_HOST}/mailu/filter:/data"
    networks:
      backend:
        aliases:
          - antivirus
  mailu-webdav:
    image: mailu/${MAILU_WEBDAV}:${MAILU_VERSION}
    volumes:
      - "${DATA_PATH_HOST}/mailu/dav:/data"
    networks:
      backend:
        aliases:
          - webdav
  mailu-admin:
    image: mailu/admin:${MAILU_VERSION}
    environment:
      - DOMAIN=${MAILU_DOMAIN}
      - HOSTNAMES=${MAILU_HOSTNAMES}
      - POSTMASTER=${MAILU_POSTMASTER}
      - SECRET_KEY=${MAILU_SECRET_KEY}
      - AUTH_RATELIMIT=${MAILU_AUTH_RATELIMIT}
      - TLS_FLAVOR=${MAILU_TLS_FLAVOR}
      - DISABLE_STATISTICS=${MAILU_DISABLE_STATISTICS}
      - DMARC_RUA=${MAILU_DMARC_RUA}
      - DMARC_RUF=${MAILU_DMARC_RUF}
      - WELCOME=${MAILU_WELCOME}
      - WELCOME_SUBJECT=${MAILU_WELCOME_SUBJECT}
      - WELCOME_BODY=${MAILU_WELCOME_BODY}
      - WEB_ADMIN=${MAILU_WEB_ADMIN}
      - WEB_WEBMAIL=${MAILU_WEB_WEBMAIL}
      - WEBSITE=${MAILU_WEBSITE}
      - WEBMAIL=${MAILU_WEBMAIL}
      - SITENAME=${MAILU_SITENAME}
      - PASSWORD_SCHEME=${MAILU_PASSWORD_SCHEME}
      - RECAPTCHA_PUBLIC_KEY=${MAILU_RECAPTCHA_PUBLIC_KEY}
      - RECAPTCHA_PRIVATE_KEY=${MAILU_RECAPTCHA_PRIVATE_KEY}
    volumes:
      - "${DATA_PATH_HOST}/mailu/data:/data"
      - "${DATA_PATH_HOST}/mailu/dkim:/dkim"
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - redis
    networks:
      backend:
        aliases:
          - admin
  mailu-webmail:
    image: "mailu/${MAILU_WEBMAIL}:${MAILU_VERSION}"
    volumes:
      - "${DATA_PATH_HOST}/mailu/webmail:/data"
    networks:
      backend:
        aliases:
          - webmail
  mailu-fetchmail:
    image: mailu/fetchmail:${MAILU_VERSION}
    environment:
      - FETCHMAIL_DELAY=${MAILU_FETCHMAIL_DELAY}
    volumes:
      - "${DATA_PATH_HOST}/mailu/data:/data"
    networks:
      backend:
        aliases:
          - fetchmail

  ### TRAEFIK #########################################
  traefik:
    build:
      context: ./traefik
    command: --docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "${TRAEFIK_HOST_HTTP_PORT}:80"
      - "${TRAEFIK_HOST_HTTPS_PORT}:443"
    networks:
      - frontend
      - backend
    labels:
      - traefik.backend=traefik
      - traefik.frontend.rule=Host:monitor.localhost
      - traefik.port=8080


